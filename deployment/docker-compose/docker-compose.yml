services:
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_DB=registry
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Standard port: 5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "registry"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  consul:
    image: hashicorp/consul:1.15
    ports:
      - "8500:8500"  # Standard port: 8500
    command: "agent -server -bootstrap -ui -client=0.0.0.0"
    
    networks:
      - app-network


  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-1
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app-network
    volumes:
      - kafka-data:/bitnami/kafka
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    ports:
      - "9308:9308"
    environment:
      - KAFKA_SERVER=kafka:9092
    networks:
      - app-network
    depends_on:
      - kafka

  kong-db:
    image: postgres:13
    environment:
      - POSTGRES_DB=kong
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kongpass
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong", "-d", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kong:
    build:
      context: ../../services/backbone/kong
      dockerfile: Dockerfile
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
      - KONG_PG_PORT=5432
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_SERVICE_DISCOVERY=consul
      - KONG_CONSUL_HOST=consul
      - KONG_CONSUL_PORT=8500
      - KONG_NGINX_DAEMON=off 
      - KONG_PLUGINS=bundled,api-costing
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ../../services/backbone/kong/plugins/api-costing:/usr/local/share/lua/5.1/kong/plugins/api-costing
    depends_on:
      kong-db:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - app-network

  kong-synch:  # Match logs naming
    build:
      context: ../../services/backbone/kong-synch
      dockerfile: Dockerfile
    command: "node synch.js"
    depends_on:
      kong:
        condition: service_healthy
      consul:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      keycloak:
        condition: service_started
      jaeger:
        condition: service_started
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
    networks:
      - app-network
  
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command: start-dev
    ports:
      - "8080:8080"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - app-network
    depends_on:
      - redis

  jaeger:
    image: jaegertracing/all-in-one:latest  
    container_name: jaeger
    ports:
      - "16686:16686"  # UI
      - "6831:6831/udp"  # Agent (UDP)
      - "14268:14268"  # Collector
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - app-network
    volumes:
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboard-provisioning.yml:/etc/grafana/provisioning/dashboards/dashboard-provisioning.yml
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
  identity:
    build:
      context: ../../services/common/identity
      dockerfile: Dockerfile
    container_name: identity
    ports:
      - "0:8080"
      - "9464:9464"    # ðŸ”¥ expose metrics port
    networks:
      - app-network
    depends_on:
      consul:
        condition: service_started

  # account:
  #   build:
  #     context: ../../services/account
  #     dockerfile: Dockerfile
  #   container_name: account
  #   ports:
  #     - "0:8080"
  #     - "9464:9464"    # ðŸ”¥ expose metrics port
  #   networks:
  #     - app-network
  #   depends_on:
  #     consul:
  #       condition: service_started

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  kong-db-data:
    driver: local
  kafka-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local