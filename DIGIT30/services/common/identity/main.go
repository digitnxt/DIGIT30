package main

import (
	"context"
	"fmt"
	"math/rand"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/swaggo/files"          // swagger embed files
	"github.com/swaggo/gin-swagger"    // gin-swagger middleware
	_ "identity/docs"                  // docs is generated by Swag CLI, you have to import it
	"log"
	"github.com/hashicorp/consul/api"
	
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/exporters/jaeger"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
	"go.opentelemetry.io/otel/sdk/resource"
	"github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
    "net/http"
)

var (
    requestCounter = prometheus.NewCounterVec(
        prometheus.CounterOpts{
            Name: "http_requests_total",
            Help: "Total number of HTTP requests",
        },
        []string{"path"},
    )
    errorCounter = prometheus.NewCounterVec(
        prometheus.CounterOpts{
            Name: "http_errors_total",
            Help: "Total number of HTTP errors",
        },
        []string{"path"},
    )
    durationHistogram = prometheus.NewHistogramVec(
        prometheus.HistogramOpts{
            Name:    "http_request_duration_seconds",
            Help:    "Histogram of response time for handler in seconds",
            Buckets: prometheus.DefBuckets,
        },
        []string{"path"},
    )
    businessServiceMetric = prometheus.NewCounterVec(
        prometheus.CounterOpts{
            Name: "business_service_metric_total",
            Help: "Business service metrics with details like who, what, why, when, how, where, whom, account, howmuch",
        },
        []string{"who", "what", "why", "when", "how", "where", "whom", "account", "howmuch"},
    )
)

// @title           Example API
// @version         1.0
// @description     This is a sample server for exposing OpenAPI with Gin and Swaggo
// @host            localhost:8080
// @BasePath        /

func main() {
	initPrometheus()
	rand.Seed(time.Now().UnixNano())
	go func() {
		mux := http.NewServeMux()
		mux.Handle("/metrics", promhttp.Handler())
	
		if err := http.ListenAndServe(":9464", mux); err != nil {
			log.Fatalf("failed to start Prometheus metrics server: %v", err)
		}
	}()
	shutdown := initTracer()
	defer func() {
		if err := shutdown(context.Background()); err != nil {
			log.Fatalf("failed to shutdown tracer provider: %v", err)
		}
	}()

	r := gin.Default()

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.GET("/openapi.json", func(c *gin.Context) {
		c.File("./docs/swagger.json")
	})

	r.GET("/ping", InstrumentHandler(PingHandler))

	// Register identity service with Consul
	if err := registerServiceWithConsul(); err != nil {
		log.Fatalf("Failed to register service with Consul: %v", err)
	}

	r.Run() // listen and serve on 0.0.0.0:8080
}

// PingHandler godoc
// @Summary      Ping the server
// @Description  Returns a pong message
// @Tags         health
// @Success      200  {string}  string  "pong"
// @Router       /ping [get]
func PingHandler(c *gin.Context) {
	ctx := c.Request.Context()
	tracer := otel.Tracer("identity-tracer")
	ctx, span := tracer.Start(ctx, "PingHandler")
	defer span.End()
	span.AddEvent("ping request received")

	// Generate random values for business service metric
	who := fmt.Sprintf("User-%d", rand.Intn(1000))
	what := "Ping"
	why := "HealthCheck"
	when := time.Now().Format(time.RFC3339)
	how := "HTTP"
	where := fmt.Sprintf("Server-%d", rand.Intn(100))
	whom := "Service-Identity"
	account := fmt.Sprintf("Account-%d", rand.Intn(100))
	howmuch := fmt.Sprintf("%d", rand.Intn(10000))

	businessServiceMetric.WithLabelValues(who, what, why, when, how, where, whom, account, howmuch).Inc()

	c.String(200, "pong")
}

func registerServiceWithConsul() error {
	// Create a new Consul client
	config := api.DefaultConfig()
	config.Address = "consul:8500"

	// Create a new Consul client
	client, err := 	api.NewClient(config)
	if err != nil {
		return err
	}

	// Define service registration
	registration := &api.AgentServiceRegistration{
		ID:      "identity-service",
		Name:    "identity",
		Address: "identity",
		Port:    8080,
		Check: &api.AgentServiceCheck{
			HTTP:     "http://identity:8080/ping",
			Interval: "10s",
			Timeout:  "5s",
		},
	}

	// Register service with Consul
	if err := client.Agent().ServiceRegister(registration); err != nil {
		return err
	}
	
	metricsRegistration := &api.AgentServiceRegistration{
		ID:      "identity-metrics",
		Name:    "identity-metrics",
		Address: "identity",
		Port:    9464,
		Tags:    []string{"metrics"},
		Check: &api.AgentServiceCheck{
			HTTP:     "http://identity:9464/metrics",
			Interval: "10s",
			Timeout:  "5s",
		},
	}
	if err := client.Agent().ServiceRegister(metricsRegistration); err != nil {
		return err
	}
	return nil
}


func InstrumentHandler(handlerFunc gin.HandlerFunc) gin.HandlerFunc {
    return func(c *gin.Context) {
        path := c.FullPath()
        timer := prometheus.NewTimer(durationHistogram.WithLabelValues(path))
        defer timer.ObserveDuration()

        handlerFunc(c)

        statusCode := c.Writer.Status()
        requestCounter.WithLabelValues(path).Inc()
        if statusCode >= 400 {
            errorCounter.WithLabelValues(path).Inc()
        }
    }
}

func initTracer() func(context.Context) error {
	// Create Jaeger exporter
	exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint("http://jaeger:14268/api/traces")))
	if err != nil {
		log.Fatalf("failed to create Jaeger exporter: %v", err)
	}

	tp := sdktrace.NewTracerProvider(
		sdktrace.WithBatcher(exp),
		sdktrace.WithResource(resource.NewWithAttributes("", attribute.String("service.name", "identity"))),
	)
	otel.SetTracerProvider(tp)
	return tp.Shutdown
}

func initPrometheus() {
    prometheus.MustRegister(requestCounter, errorCounter, durationHistogram, businessServiceMetric)
}